import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

/**
 * @author Samhitha Mupharaphu
 * @version 11/17/21
 * 
 * A basic code that allows the user to draw/erase with a 5pt pen, randomize pen colors,
 * fill the screen with the pen color and choose their own RGB values.
 */
public class Paint extends JComponent implements Runnable {
    private Image image; // the canvas
    private Graphics2D graphics2D;  // this will enable drawing
    private int curX; // current mouse x coordinate
    private int curY; // current mouse y coordinate
    private int oldX; // previous mouse x coordinate
    private int oldY; // previous mouse y coordinate

    JButton clearButton; // a button to change paint color
    JButton fillButton; // a button to change paint color
    JButton eraseButton; // a button to change paint color
    JButton randomButton; // a button to change paint color

    JTextField hexTextField;
    JButton hexButton;

    JTextField rTextField;
    JTextField gTextField;
    JTextField bTextField;

    JButton rgbButton;
    Paint paint; // variable of the type ColorPicker

    String hexText;
    String rText;
    String gText;
    String bText;

    int rColor;
    int gColor;
    int bColor;


    public Paint() {
        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                /* set oldX and oldY coordinates to beginning mouse press*/
                oldX = e.getX();
                oldY = e.getY();
            }
        });


        addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                /* set current coordinates to where mouse is being dragged*/
                curX = e.getX();
                curY = e.getY();

                /* draw the line between old coordinates and new ones */
                graphics2D.setStroke(new BasicStroke(5));
                graphics2D.drawLine(oldX, oldY, curX, curY);

                /* refresh frame and reset old coordinates */
                repaint();
                oldX = curX;
                oldY = curY;

            }
        });
    }

    /* action listener for buttons */
    ActionListener actionListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == clearButton) {
                hexTextField.setText("#");
                rTextField.setText("");
                gTextField.setText("");
                bTextField.setText("");
                paint.clear();
            }
            if (e.getSource() == fillButton) {
                paint.fill();
                hexTextField.setText("#");
                rTextField.setText("");
                gTextField.setText("");
                bTextField.setText("");
            }
            if (e.getSource() == eraseButton) {
                paint.erase();
            }
            if (e.getSource() == randomButton) {
                int min = 0;
                int max = 255;
                Random random = new Random();
                int red = random.nextInt((max - min) + 1) + min;
                int green = random.nextInt((max - min) + 1) + min;
                int blue = random.nextInt((max - min) + 1) + min;
                String hex = String.format("#%02x%02x%02x", red, green, blue);
                hexTextField.setText(hex);
                rTextField.setText(Integer.toString(red));
                gTextField.setText(Integer.toString(green));
                bTextField.setText(Integer.toString(blue));
                paint.random(red, green, blue);
            }
            if (e.getSource() == hexButton) {
                boolean badHexColor = false;
                hexText = hexTextField.getText();
                if (hexText.length() == 1) {
                    JOptionPane.showMessageDialog(null, "Not a valid Hex Value",
                            "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    Color color = null;
                    try {
                        color = Color.decode(hexText);
                    } catch (NumberFormatException nfe) {
                        badHexColor = true;
                    }
                    if (badHexColor) {
                        JOptionPane.showMessageDialog(null, "Not a valid Hex Value",
                                "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        if (color != null) {
                            rTextField.setText(Integer.toString(color.getRed()));
                            gTextField.setText(Integer.toString(color.getGreen()));
                            bTextField.setText(Integer.toString(color.getBlue()));
                            paint.hex(hexText);
                        }
                    }
                }
            }
            if (e.getSource() == rgbButton) {
                rText = rTextField.getText();
                gText = gTextField.getText();
                bText = bTextField.getText();
                int rColorTemp;
                int gColorTemp;
                int bColorTemp;
                boolean inValidValue = false;

                if (rText.length() == 0) {
                    rColorTemp = 0;
                    rTextField.setText(Integer.toString(rColorTemp));
                } else {
                    rColorTemp = Integer.parseInt(rText);
                    if (!(rColorTemp >= 0 && rColorTemp <= 255)) {
                        inValidValue = true;
                    }
                }

                if (gText.length() == 0) {
                    gColorTemp = 0;
                    gTextField.setText(Integer.toString(gColorTemp));
                } else {
                    gColorTemp = Integer.parseInt(gText);
                    if (!(gColorTemp >= 0 && gColorTemp <= 255)) {
                        inValidValue = true;
                    }
                }

                if (bText.length() == 0) {
                    bColorTemp = 0;
                    bTextField.setText(Integer.toString(bColorTemp));
                } else {
                    bColorTemp = Integer.parseInt(bText);
                    if (!(bColorTemp >= 0 && bColorTemp <= 255)) {
                        inValidValue = true;
                    }
                }

                if (inValidValue) {
                    JOptionPane.showMessageDialog(null, "Not a valid RGB Value",
                            "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    String hex = String.format("#%02x%02x%02x", rColorTemp, gColorTemp, bColorTemp);
                    hexTextField.setText(hex);
                    paint.rgb(rColorTemp, gColorTemp, bColorTemp);
                }
            }
        }
    };

    public void random(int rColorTemp, int gColorTemp, int bColorTemp) {
//        System.out.println("For Random got RGB  as RED: " + rColorTemp + "GREEN" + gColorTemp + "BLUE" + bColorTemp);
        this.rColor = rColorTemp;
        this.gColor = gColorTemp;
        this.bColor = bColorTemp;
        Color rgbColor = new Color(rColorTemp, gColorTemp, bColorTemp);
        graphics2D.setPaint(rgbColor);
        repaint();
    }


    public void rgb(int rColorTemp, int gColorTemp, int bColorTemp) {
//        System.out.println("Got RGB  as RED: " + rColorTemp + "GREEN" + gColorTemp + "BLUE" + bColorTemp);
        this.rColor = rColorTemp;
        this.gColor = gColorTemp;
        this.bColor = bColorTemp;
        Color rgbColor = new Color(rColorTemp, gColorTemp, bColorTemp);
        graphics2D.setPaint(rgbColor);
        repaint();
    }

    public void hex(String hexText1) {
//        System.out.println("Got Hex as " + hexText1);
        Color hextColor = Color.decode(hexText1);
        graphics2D.setPaint(hextColor);
        this.rColor = hextColor.getRed();
        this.bColor = hextColor.getBlue();
        this.gColor = hextColor.getGreen();
        repaint();
    }

    /* set up paint colors */
    public void clear() {
        graphics2D.setPaint(Color.white);
        graphics2D.fillRect(0, 0, getSize().width, getSize().height);
        graphics2D.setPaint(Color.black);
        this.rColor = 255;
        this.bColor = 255;
        this.gColor = 255;
        repaint();
    }

    public void fill() {
        Color rgbColor = new Color(rColor, gColor, bColor);
        graphics2D.setBackground(rgbColor);
        graphics2D.fillRect(0, 0, getSize().width, getSize().height);
        graphics2D.setPaint(Color.black);
        this.rColor = 0;
        this.bColor = 0;
        this.gColor = 0;
        repaint();
    }

    public void erase() {
        graphics2D.setPaint(graphics2D.getBackground());
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Paint());
    }

    public void run() {
        /* set up JFrame */
        JFrame frame = new JFrame("Paint");
        Container content = frame.getContentPane();
        content.setLayout(new BorderLayout());
        paint = new Paint();


        clearButton = new JButton("Clear");
        clearButton.addActionListener(actionListener);

        fillButton = new JButton("Fill");
        fillButton.addActionListener(actionListener);

        eraseButton = new JButton("Erase");
        eraseButton.addActionListener(actionListener);

        randomButton = new JButton("Random");
        randomButton.addActionListener(actionListener);

        rgbButton = new JButton("RGB");
        rgbButton.addActionListener(actionListener);

        hexButton = new JButton("Hex");
        hexButton.addActionListener(actionListener);

        hexTextField = new JTextField("#");
        hexTextField.setName("Hex");
        hexTextField.setColumns(10);

        rTextField = new JTextField();
        rTextField.setColumns(5);

        gTextField = new JTextField();
        gTextField.setColumns(5);

        bTextField = new JTextField();
        bTextField.setColumns(5);

        JPanel panel = new JPanel();
        panel.add(clearButton);
        panel.add(fillButton);
        panel.add(eraseButton);
        panel.add(randomButton);
        content.add(panel, BorderLayout.NORTH);

        content.add(paint, BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel();
        JLabel hexLabel = new JLabel("Hex");
        hexLabel.setLabelFor(hexTextField);
        bottomPanel.add(hexLabel);
        bottomPanel.add(hexTextField);
        bottomPanel.add(hexButton);

        JLabel redLabel = new JLabel("R");
        redLabel.setLabelFor(rTextField);
        bottomPanel.add(redLabel);
        bottomPanel.add(rTextField);

        JLabel greenLabel = new JLabel("G");
        greenLabel.setLabelFor(gTextField);
        bottomPanel.add(greenLabel);
        bottomPanel.add(gTextField);

        JLabel blueLabel = new JLabel("B");
        blueLabel.setLabelFor(bTextField);
        bottomPanel.add(blueLabel);
        bottomPanel.add(bTextField);

        bottomPanel.add(rgbButton);

        content.add(bottomPanel, BorderLayout.SOUTH);

        frame.setSize(600, 400);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);


    }

    protected void paintComponent(Graphics g) {
        if (image == null) {
            image = createImage(getSize().width, getSize().height);
            /* this lets us draw on the image (ie. the canvas)*/
            graphics2D = (Graphics2D) image.getGraphics();
            /* gives us better rendering quality for the drawing lines */
            graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            /* set canvas to white with default paint color */
            graphics2D.setPaint(Color.white);
            graphics2D.fillRect(0, 0, getSize().width, getSize().height);
            graphics2D.setPaint(Color.black);
            repaint();
        }
        g.drawImage(image, 0, 0, null);
    }
}
